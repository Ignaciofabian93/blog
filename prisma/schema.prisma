generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Country {
  id      Int      @id @default(autoincrement())
  country String
  regions Region[]
  Seller  Seller[]
}

model Region {
  id        Int      @id @default(autoincrement())
  region    String
  countryId Int
  cities    City[]
  country   Country  @relation(fields: [countryId], references: [id])
  Seller    Seller[]
}

model City {
  id       Int      @id @default(autoincrement())
  city     String
  regionId Int
  region   Region   @relation(fields: [regionId], references: [id])
  counties County[]
  Seller   Seller[]
}

model County {
  id     Int      @id @default(autoincrement())
  county String
  cityId Int
  city   City     @relation(fields: [cityId], references: [id])
  Seller Seller[]
}

model Match {
  id         Int      @id @default(autoincrement())
  senderId   String
  receiverId String
  createdAt  DateTime @default(now())
  isMatched  Boolean  @default(false)
  receiver   Seller   @relation("MatchReceiver", fields: [receiverId], references: [id])
  sender     Seller   @relation("MatchSender", fields: [senderId], references: [id])
}

model Product {
  id                                            Int              @id @default(autoincrement())
  name                                          String
  description                                   String
  price                                         Int
  hasOffer                                      Boolean          @default(false)
  offerPrice                                    Int              @default(0)
  stock                                         Int              @default(0)
  sellerId                                      String
  badges                                        Badge[]
  barcode                                       String?          @unique
  brand                                         String
  color                                         String?
  createdAt                                     DateTime         @default(now())
  images                                        String[]
  interests                                     String[]
  isActive                                      Boolean          @default(true)
  isExchangeable                                Boolean          @default(false)
  productCategoryId                             Int
  ratingCount                                   Int              @default(0)
  ratings                                       Float            @default(0)
  reviewsNumber                                 Int              @default(0)
  sku                                           String?
  updatedAt                                     DateTime         @updatedAt
  condition                                     ProductCondition @default(NEW)
  conditionDescription                          String?
  sustainabilityScore                           Int?
  materialComposition                           String?
  recycledContent                               Float?
  chats                                         Chat[]
  Exchange_Exchange_offeredProductIdToProduct   Exchange[]       @relation("Exchange_offeredProductIdToProduct")
  Exchange_Exchange_requestedProductIdToProduct Exchange[]       @relation("Exchange_requestedProductIdToProduct")
  itemsOrdered                                  OrderItem[]
  productCategory                               ProductCategory  @relation(fields: [productCategoryId], references: [id])
  Seller                                        Seller           @relation(fields: [sellerId], references: [id])
  comments                                      ProductComment[]
  likes                                         ProductLike[]
  ProductVariant                                ProductVariant[]
}

model ProductLike {
  id        Int     @id @default(autoincrement())
  productId Int
  sellerId  String
  product   Product @relation(fields: [productId], references: [id])
  Seller    Seller  @relation(fields: [sellerId], references: [id])
}

model ProductComment {
  id        Int     @id @default(autoincrement())
  comment   String
  productId Int
  sellerId  String
  product   Product @relation(fields: [productId], references: [id])
  Seller    Seller  @relation(fields: [sellerId], references: [id])
}

model MaterialImpactEstimate {
  id                      Int               @id @default(autoincrement())
  materialType            String
  estimatedCo2SavingsKG   Float
  estimatedWaterSavingsLT Float
  fifthMaterialTypeFor    ProductCategory[] @relation("FifthMaterialType")
  firstMaterialTypeFor    ProductCategory[] @relation("FirstMaterialType")
  fourthMaterialTypeFor   ProductCategory[] @relation("FourthMaterialType")
  secondMaterialTypeFor   ProductCategory[] @relation("SecondMaterialType")
  thirdMaterialTypeFor    ProductCategory[] @relation("ThirdMaterialType")
}

model ProductCategory {
  id                         Int                     @id @default(autoincrement())
  departmentCategoryId       Int
  averageWeight              Float?                  @default(0.0)
  fifthMaterialTypeId        Int?
  fifthMaterialTypeQuantity  Float?                  @default(0.0)
  firstMaterialTypeId        Int?
  firstMaterialTypeQuantity  Float?                  @default(0.0)
  fourthMaterialTypeId       Int?
  fourthMaterialTypeQuantity Float?                  @default(0.0)
  keywords                   String[]
  productCategoryName        String
  secondMaterialTypeId       Int?
  secondMaterialTypeQuantity Float?                  @default(0.0)
  size                       ProductSize?            @default(M)
  thirdMaterialTypeId        Int?
  thirdMaterialTypeQuantity  Float?                  @default(0.0)
  weightUnit                 WeightUnit?             @default(KG)
  products                   Product[]
  departmentCategory         DepartmentCategory      @relation(fields: [departmentCategoryId], references: [id])
  fifthMaterialType          MaterialImpactEstimate? @relation("FifthMaterialType", fields: [fifthMaterialTypeId], references: [id])
  firstMaterialType          MaterialImpactEstimate? @relation("FirstMaterialType", fields: [firstMaterialTypeId], references: [id])
  fourthMaterialType         MaterialImpactEstimate? @relation("FourthMaterialType", fields: [fourthMaterialTypeId], references: [id])
  secondMaterialType         MaterialImpactEstimate? @relation("SecondMaterialType", fields: [secondMaterialTypeId], references: [id])
  thirdMaterialType          MaterialImpactEstimate? @relation("ThirdMaterialType", fields: [thirdMaterialTypeId], references: [id])
}

model DepartmentCategory {
  id                     Int               @id @default(autoincrement())
  departmentId           Int
  departmentCategoryName String
  department             Department        @relation(fields: [departmentId], references: [id])
  productCategories      ProductCategory[]
}

model Department {
  id                   Int                  @id @default(autoincrement())
  departmentName       String
  departmentImage      String?
  departmentCategories DepartmentCategory[]
}

model Transaction {
  id              Int             @id @default(autoincrement())
  kind            TransactionKind
  pointsCollected Int
  createdAt       DateTime        @default(now())
  sellerId        String
  Exchange        Exchange?
  Seller          Seller          @relation(fields: [sellerId], references: [id])
}

model Story {
  id          Int      @id @default(autoincrement())
  images      String[]
  title       String
  description String
  sellerId    String
  Seller      Seller   @relation(fields: [sellerId], references: [id])
}

model Order {
  id               Int            @id @default(autoincrement())
  sellerId         String
  createdAt        DateTime       @default(now())
  shippingStatusId Int
  Seller           Seller         @relation(fields: [sellerId], references: [id])
  shippingStatus   ShippingStatus @relation(fields: [shippingStatusId], references: [id])
  orderItems       OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model ShippingStatus {
  id     Int           @id @default(autoincrement())
  status ShippingStage @default(PREPARING)
  orders Order[]
}

model Chat {
  id         Int       @id @default(autoincrement())
  senderId   String
  receiverId String
  productId  Int?
  isExchange Boolean   @default(false)
  createdAt  DateTime  @default(now())
  product    Product?  @relation(fields: [productId], references: [id])
  receiver   Seller    @relation("ChatReceiver", fields: [receiverId], references: [id])
  sender     Seller    @relation("ChatSender", fields: [senderId], references: [id])
  messages   Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  chatId    Int
  senderId  String
  content   String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
  sender    Seller   @relation(fields: [senderId], references: [id])
}

model Admin {
  id        String   @id
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model Co2ImpactMessage {
  id       Int    @id @default(autoincrement())
  min      Float  @default(0.0)
  max      Float  @default(0.0)
  message1 String
  message2 String
  message3 String
}

model WaterImpactMessage {
  id       Int    @id @default(autoincrement())
  min      Float  @default(0.0)
  max      Float  @default(0.0)
  message1 String
  message2 String
  message3 String
}

model Exchange {
  id                                           Int            @id @default(autoincrement())
  transactionId                                Int            @unique
  offeredProductId                             Int
  requestedProductId                           Int
  status                                       ExchangeStatus @default(PENDING)
  notes                                        String?
  createdAt                                    DateTime       @default(now())
  completedAt                                  DateTime?
  Product_Exchange_offeredProductIdToProduct   Product        @relation("Exchange_offeredProductIdToProduct", fields: [offeredProductId], references: [id])
  Product_Exchange_requestedProductIdToProduct Product        @relation("Exchange_requestedProductIdToProduct", fields: [requestedProductId], references: [id])
  Transaction                                  Transaction    @relation(fields: [transactionId], references: [id])
}

model PersonProfile {
  id             String    @id
  sellerId       String    @unique
  firstName      String
  lastName       String?
  displayName    String?
  bio            String?
  birthday       DateTime?
  profileImage   String?
  coverImage     String?
  allowExchanges Boolean   @default(true)
  Seller         Seller    @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model ProductVariant {
  id        Int      @id @default(autoincrement())
  productId Int
  name      String
  price     Int
  stock     Int
  color     String?
  size      String?
  createdAt DateTime @default(now())
  updatedAt DateTime
  Product   Product  @relation(fields: [productId], references: [id])

  @@unique([productId, color, size])
}

model Seller {
  id                     String           @id
  email                  String           @unique
  password               String
  sellerType             SellerType
  isActive               Boolean          @default(true)
  isVerified             Boolean          @default(false)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime
  address                String?          @default("")
  cityId                 Int?
  countryId              Int?
  countyId               Int?
  regionId               Int?
  phone                  String?          @default("")
  website                String?
  preferredContactMethod ContactMethod?   @default(WHATSAPP)
  socialMediaLinks       Json?
  accountType            AccountType?     @default(FREE)
  points                 Int?             @default(0)
  sellerCategoryId       Int?
  receivedChats          Chat[]           @relation("ChatReceiver")
  sentChats              Chat[]           @relation("ChatSender")
  matchesReceived        Match[]          @relation("MatchReceiver")
  matchesSent            Match[]          @relation("MatchSender")
  messages               Message[]
  Order                  Order[]
  PersonProfile          PersonProfile?
  Product                Product[]
  ProductComment         ProductComment[]
  ProductLike            ProductLike[]
  City                   City?            @relation(fields: [cityId], references: [id])
  Country                Country?         @relation(fields: [countryId], references: [id])
  County                 County?          @relation(fields: [countyId], references: [id])
  Region                 Region?          @relation(fields: [regionId], references: [id])
  SellerCategory         SellerCategory?  @relation(fields: [sellerCategoryId], references: [id])
  StoreProfile           StoreProfile?
  Story                  Story[]
  Transaction            Transaction[]
}

model SellerCategory {
  id                     Int      @id @default(autoincrement())
  name                   String
  categoryDiscountAmount Int
  pointsThreshold        Int
  level                  Int
  Seller                 Seller[]
}

model StoreProfile {
  id                   String  @id
  sellerId             String  @unique
  businessName         String
  displayName          String?
  description          String?
  logo                 String?
  coverImage           String?
  businessType         String?
  taxId                String?
  businessRegistration String?
  allowExchanges       Boolean @default(false)
  minOrderAmount       Int?
  shippingPolicy       String?
  returnPolicy         String?
  businessHours        Json?
  Seller               Seller  @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

enum AccountType {
  FREE
  PLUS
  PREMIUM
}

enum TransactionKind {
  PURCHASE
  EXCHANGE
  GIFT
  REFERRAL
  BONUS
}

enum ShippingStage {
  PREPARING
  SHIPPED
  DELIVERED
  RETURNED
  CANCELED
}

enum Badge {
  POPULAR
  DISCOUNTED
  WOMAN_OWNED
  BEST_SELLER
  TOP_RATED
  COMMUNITY_FAVORITE
  LIMITED_TIME_OFFER
  FLASH_SALE
  BEST_VALUE
  HANDMADE
  SUSTAINABLE
  SUPPORTS_CAUSE
  FAMILY_BUSINESS
  CHARITY_SUPPORT
  LIMITED_STOCK
  SEASONAL
  FREE_SHIPPING
  FOR_REPAIR
  REFURBISHED
  EXCHANGEABLE
  LAST_PRICE
  FOR_GIFT
  OPEN_TO_OFFERS
  OPEN_BOX
  CRUELTY_FREE
  DELIVERED_TO_HOME
  IN_HOUSE_PICKUP
  IN_MID_POINT_PICKUP
}

enum ContactMethod {
  EMAIL
  WHATSAPP
  ALL
  PHONE
  INSTAGRAM
}

enum WeightUnit {
  KG
  LB
  OZ
  G
}

enum ProductSize {
  XS
  S
  M
  L
  XL
}

enum ExchangeStatus {
  PENDING
  ACCEPTED
  DECLINED
  COMPLETED
  CANCELLED
}

enum ProductCondition {
  NEW
  OPEN_BOX
  LIKE_NEW
  FAIR
  POOR
  FOR_PARTS
  REFURBISHED
}

enum SellerType {
  PERSON
  STORE
}
